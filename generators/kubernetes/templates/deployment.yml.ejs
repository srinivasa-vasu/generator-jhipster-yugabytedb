<%#
 Copyright 2013-2022 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
apiVersion: <%= KUBERNETES_DEPLOYMENT_API_VERSION %>
kind: Deployment
metadata:
  name: <%= app.baseName.toLowerCase() %>
  namespace: <%= kubernetesNamespace %>
spec:
  replicas: 1
  selector:
    matchLabels:
      app: <%= app.baseName.toLowerCase() %>
      version: "v1"
  template:
    metadata:
      labels:
        app: <%= app.baseName.toLowerCase() %>
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - <%= app.baseName.toLowerCase() %>
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: praqma/network-multitool:alpine-extra
          command:
            - '/bin/sh'
            - '-c'
            - |
                dbRef=""
                port=9042
                <%_ if (app.prodDatabaseTypePostgres) { _%>
                port=5433
                <%_ } _%>

                <%_ if (kubernetesYBDPRuntime) { _%>
                  dbRef=<%= KUBERNETES_YB_DSQL %>
                <%_ } else { _%>
                  dbRef=<%= app.baseName.toLowerCase() %>
                <%_ } _%>

                while true
                do
                  rt=$(echo 'exit' | curl -s telnet://${dbRef}-<%= KUBERNETES_YB_DSQL_EP_SUFFIX %>:$port)
                  if [ $? -eq 0 ]; then
                    echo "DB is UP; checking the object(s) status"
                    rt=$(curl -s ${dbRef}-tserver-ui:9000/metrics | jq '.[] | select(.type == "server") | .metrics[] | select(.name=="proxy_response_bytes_yb_master_MasterDdl_IsCreateNamespaceDone") | .value')
                    if [ $rt -gt 1 ]; then
                      echo "DB is initialized"
                      break
                    fi
                  fi
                  echo "DB is not yet reachable; wait for a few secs before retry"
                  sleep 10
                done
      containers:
      - name: <%= app.baseName.toLowerCase() %>-app
        image: <%= app.targetImageName %>
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: prod
<%_ if (app.databaseTypeCassandra) { _%>
  <%_ if (kubernetesYBDPRuntime) { _%>
        - name: SPRING_DATA_CASSANDRA_CONTACTPOINTS
          value: <%= KUBERNETES_YB_DSQL %>-<%= KUBERNETES_YB_DSQL_EP_SUFFIX %>
  <%_ } else { _%>
        - name: SPRING_DATA_CASSANDRA_CONTACTPOINTS
          value: <%= app.baseName.toLowerCase() %>-<%= KUBERNETES_YB_DSQL_EP_SUFFIX %>
  <%_ } _%>
        - name: SPRING_DATA_CASSANDRA_PASSWORD
          valueFrom:
            secretKeyRef:
              name: <%= app.baseName.toLowerCase() %>-vault
              key: yql-secret
<%_ } _%>
<%_ if (app.serviceDiscoveryEureka) { _%>
        - name: SPRING_CLOUD_CONFIG_URI
          value: http://admin:${jhipster.registry.password}@jhipster-registry.<%= kubernetesNamespace %>.svc.cluster.local:8761/config
        - name: JHIPSTER_REGISTRY_PASSWORD
          valueFrom:
            secretKeyRef:
              name: registry-secret
              key: registry-admin-password
        - name: EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE
          value: http://admin:${jhipster.registry.password}@jhipster-registry.<%= kubernetesNamespace %>.svc.cluster.local:8761/eureka/
  <%_ if (istio) { _%>
        - name: EUREKA_INSTANCE_PREFER_IP_ADDRESS
          value: "false"
        - name: EUREKA_INSTANCE_HOSTNAME
          value: <%= app.baseName.toLowerCase() %>
  <%_ } _%>
<%_ } _%>
<%_ if (app.serviceDiscoveryConsul) { _%>
        - name: SPRING_CLOUD_CONSUL_HOST
          value: consul.<%= kubernetesNamespace %>.svc.cluster.local
        - name: SPRING_CLOUD_CONSUL_PORT
          value: "8500"
  <%_ if (istio) { _%>
        - name: SPRING_CLOUD_CONSUL_DISCOVERY_PREFER_IP_ADDRESS
          value: "false"
        - name: SPRING_CLOUD_CONSUL_DISCOVERY_HOSTNAME
          value: <%= app.baseName.toLowerCase() %>
        - name: SPRING_CLOUD_CONSUL_DISCOVERY_SERVICE_NAME
          value: <%= app.baseName.toLowerCase() %>
  <%_ } _%>
<%_ } _%>
<%_ if (!app.serviceDiscoveryType && app.authenticationTypeJwt) { _%>
        - name: JHIPSTER_SECURITY_AUTHENTICATION_JWT_BASE64_SECRET
          valueFrom:
            secretKeyRef:
              name: jwt-secret
              key: secret
<%_ } _%>
<%_ if (app.prodDatabaseTypePostgres) { _%>
  <%_ if (kubernetesYBDPRuntime) { _%>
        - name: SPRING_DATASOURCE_URL
          value: <%- getJDBCUrl(app.prodDatabaseType, { hostname: `${KUBERNETES_YB_DSQL}-${KUBERNETES_YB_DSQL_EP_SUFFIX}.${kubernetesNamespace}.svc.cluster.local`, databaseName: app.baseName.toLowerCase() }) %>
#        - name: SPRING_LIQUIBASE_URL
#          value: <%- getJDBCUrl(app.prodDatabaseType, { hostname: `${KUBERNETES_YB_DSQL}-${KUBERNETES_YB_DSQL_EP_SUFFIX}.${kubernetesNamespace}.svc.cluster.local`, databaseName: app.baseName.toLowerCase() }) %>
  <%_ } else { _%>
        - name: SPRING_DATASOURCE_URL
          value: <%- getJDBCUrl(app.prodDatabaseType, { hostname: `${app.baseName.toLowerCase()}-${KUBERNETES_YB_DSQL_EP_SUFFIX}.${kubernetesNamespace}.svc.cluster.local`, databaseName: app.baseName.toLowerCase() }) %>
#        - name: SPRING_LIQUIBASE_URL
#          value: <%- getJDBCUrl(app.prodDatabaseType, { hostname: `${app.baseName.toLowerCase()}-${KUBERNETES_YB_DSQL_EP_SUFFIX}.${kubernetesNamespace}.svc.cluster.local`, databaseName: app.baseName.toLowerCase() }) %>
  <%_ } _%>
        - name: SPRING_DATASOURCE_USERNAME
          value: <%= app.baseName %>
    <%_ if (app.reactive) { _%>
        - name: SPRING_R2DBC_PASSWORD
    <%_ } else { _%>
        - name: SPRING_DATASOURCE_PASSWORD
    <%_ } _%>
          valueFrom:
            secretKeyRef:
              name: <%= app.baseName.toLowerCase() %>-vault
              key: yql-secret
    <%_ if (app.reactive) { _%>
      <%_ if (kubernetesYBDPRuntime) { _%>
        - name: SPRING_R2DBC_URL
          value: <%- getR2DBCUrl(app.prodDatabaseType, { hostname: `${KUBERNETES_YB_DSQL}-${KUBERNETES_YB_DSQL_EP_SUFFIX}.${kubernetesNamespace}.svc.cluster.local`, databaseName: app.baseName.toLowerCase() }) %>
        - name: SPRING_LIQUIBASE_URL
          value: <%- getJDBCUrl(app.prodDatabaseType, { hostname: `${KUBERNETES_YB_DSQL}-${KUBERNETES_YB_DSQL_EP_SUFFIX}.${kubernetesNamespace}.svc.cluster.local`, databaseName: app.baseName.toLowerCase() }) %>
      <%_ } else { _%>
        - name: SPRING_R2DBC_URL
          value: <%- getR2DBCUrl(app.prodDatabaseType, { hostname: `${app.baseName.toLowerCase()}-${KUBERNETES_YB_DSQL_EP_SUFFIX}.${kubernetesNamespace}.svc.cluster.local`, databaseName: app.baseName.toLowerCase() }) %>
        - name: SPRING_LIQUIBASE_URL
          value: <%- getJDBCUrl(app.prodDatabaseType, { hostname: `${app.baseName.toLowerCase()}-${KUBERNETES_YB_DSQL_EP_SUFFIX}.${kubernetesNamespace}.svc.cluster.local`, databaseName: app.baseName.toLowerCase() }) %>
      <%_ } _%>
    <%_ } _%>
  <%_ } _%>
<%_ if (app.searchEngineElasticsearch) { _%>
        - name: SPRING_ELASTICSEARCH_REST_URIS
          value: http://<%= app.baseName.toLowerCase() %>-elasticsearch.<%= kubernetesNamespace %>.svc.cluster.local:9200
<%_ } _%>
<%_ if (app.messageBrokerKafka) { _%>
        - name: KAFKA_CONSUMER_KEY_DESERIALIZER
          value: 'org.apache.kafka.common.serialization.StringDeserializer'
        - name: KAFKA_CONSUMER_VALUE_DESERIALIZER
          value: 'org.apache.kafka.common.serialization.StringDeserializer'
        - name: KAFKA_CONSUMER_BOOTSTRAP_SERVERS
          value: 'jhipster-kafka.<%= kubernetesNamespace %>.svc.cluster.local:9092'
        - name: KAFKA_CONSUMER_GROUP_ID
          value: '<%= app.baseName.toLowerCase() %>'
        - name: KAFKA_CONSUMER_AUTO_OFFSET_RESET
          value: 'earliest'
        - name: KAFKA_PRODUCER_BOOTSTRAP_SERVERS
          value: 'jhipster-kafka.<%= kubernetesNamespace %>.svc.cluster.local:9092'
        - name: KAFKA_PRODUCER_KEY_DESERIALIZER
          value: 'org.apache.kafka.common.serialization.StringDeserializer'
        - name: KAFKA_PRODUCER_VALUE_DESERIALIZER
          value: 'org.apache.kafka.common.serialization.StringDeserializer'
<%_ } _%>
<%_ if (monitoringPrometheus) { _%>
        - name: MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED
          value: 'true'
<%_ } _%>
<%_ if (deploymentApplicationTypeMicroservice) { _%>
        - name: SPRING_SLEUTH_PROPAGATION_KEYS
          value: "x-request-id,x-ot-span-context"
<%_ } _%>
        - name: JAVA_OPTS
          value: " -Xmx256m -Xms256m"
        - name: SERVER_SHUTDOWN
          value: graceful
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1"
        ports:
        - name: http
          containerPort: <%= app.serverPort %>
        readinessProbe:
          httpGet:
            path: /management/health/readiness
            port: http
          initialDelaySeconds: 20
          periodSeconds: 15
          failureThreshold: 6
        livenessProbe:
          httpGet:
            path: /management/health/liveness
            port: http
          initialDelaySeconds: 120
